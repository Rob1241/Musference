// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Musference.Data;

#nullable disable

namespace Musference.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20230304151619_role-delete")]
    partial class roledelete
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AnswerUser", b =>
                {
                    b.Property<int>("AnswersLikedId")
                        .HasColumnType("int");

                    b.Property<int>("UsersThatLikedId")
                        .HasColumnType("int");

                    b.HasKey("AnswersLikedId", "UsersThatLikedId");

                    b.HasIndex("UsersThatLikedId");

                    b.ToTable("AnswerUser");
                });

            modelBuilder.Entity("Musference.Models.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AudioFile")
                        .HasColumnType("longtext");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImageFile")
                        .HasColumnType("longtext");

                    b.Property<int>("Pluses")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("AnswersDbSet");
                });

            modelBuilder.Entity("Musference.Models.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AnswersAmount")
                        .HasColumnType("int");

                    b.Property<string>("AudioFile")
                        .HasColumnType("longtext");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageFile")
                        .HasColumnType("longtext");

                    b.Property<int>("Pluses")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionsDbSet");
                });

            modelBuilder.Entity("Musference.Models.Entities.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AudioFile")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<string>("LogoFile")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TracksDbSet");
                });

            modelBuilder.Entity("Musference.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("Contact")
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageFile")
                        .HasColumnType("longtext");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Reputation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UsersDbSet");
                });

            modelBuilder.Entity("QuestionUser", b =>
                {
                    b.Property<int>("QuestionsLikedId")
                        .HasColumnType("int");

                    b.Property<int>("UsersThatLikedId")
                        .HasColumnType("int");

                    b.HasKey("QuestionsLikedId", "UsersThatLikedId");

                    b.HasIndex("UsersThatLikedId");

                    b.ToTable("QuestionUser");
                });

            modelBuilder.Entity("TrackUser", b =>
                {
                    b.Property<int>("TracksLikedId")
                        .HasColumnType("int");

                    b.Property<int>("UsersThatLikedId")
                        .HasColumnType("int");

                    b.HasKey("TracksLikedId", "UsersThatLikedId");

                    b.HasIndex("UsersThatLikedId");

                    b.ToTable("TrackUser");
                });

            modelBuilder.Entity("AnswerUser", b =>
                {
                    b.HasOne("Musference.Models.Entities.Answer", null)
                        .WithMany()
                        .HasForeignKey("AnswersLikedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Musference.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersThatLikedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Musference.Models.Entities.Answer", b =>
                {
                    b.HasOne("Musference.Models.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Musference.Models.Entities.User", "User")
                        .WithMany("Answers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Musference.Models.Entities.Question", b =>
                {
                    b.HasOne("Musference.Models.Entities.User", "User")
                        .WithMany("Questions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Musference.Models.Entities.Track", b =>
                {
                    b.HasOne("Musference.Models.Entities.User", "User")
                        .WithMany("Tracks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuestionUser", b =>
                {
                    b.HasOne("Musference.Models.Entities.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionsLikedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Musference.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersThatLikedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrackUser", b =>
                {
                    b.HasOne("Musference.Models.Entities.Track", null)
                        .WithMany()
                        .HasForeignKey("TracksLikedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Musference.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersThatLikedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Musference.Models.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Musference.Models.Entities.User", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Questions");

                    b.Navigation("Tracks");
                });
#pragma warning restore 612, 618
        }
    }
}
